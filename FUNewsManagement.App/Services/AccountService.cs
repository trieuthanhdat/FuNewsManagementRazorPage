using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using System.Security.Claims;
using System.Threading.Tasks;
using FUNewsManagement.Domain.Entities;
using FUNewsManagement.Domain.DTOs;
using FUNewsManagement.Domain;
using FUNewsManagement.App.Interfaces;
using FUNewsManagement.Domain.Shared;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.SignalR;
using FUNewsManagement.API.Hubs;
using Microsoft.Extensions.Configuration;
using Microsoft.Identity.Client;

namespace FUNewsManagement.App.Services
{
    public class AccountService : IAccountService
    {
        private readonly FunewsManagementContext _context;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly IPasswordHasher _passwordHasher;
        private readonly IHubContext<AccountHub> _accountHub;
        private readonly IConfiguration _config;

        public AccountService(
            FunewsManagementContext context,
            IHttpContextAccessor httpContextAccessor,
            IPasswordHasher passwordHasher,
            IHubContext<AccountHub> accountHub,
            IConfiguration config)
        {
            _context = context;
            _httpContextAccessor = httpContextAccessor;
            _passwordHasher = passwordHasher;
            _accountHub = accountHub;
            _config = config;
        }
        public async Task<SystemAccount> GetAccountByEmailAsync(string email)
        {
            return await _context.SystemAccounts
                .FirstOrDefaultAsync(a => a.AccountEmail == email);
        }
        public async Task<bool> VerifyPasswordAsync(short accountId, string currentPassword)
        {
            var user = await _context.SystemAccounts.FindAsync(accountId);
            if (user == null) return false;

            return _passwordHasher.VerifyPassword(currentPassword, user.AccountPassword);
        }
        /// <summary>
        /// Authenticate user by Email & Password
        /// </summary>
        public async Task<(int Status, int Role)> AuthenticateAsync(LoginDTO loginDTO)
        {
            var userEntity = await _context.SystemAccounts
                .FirstOrDefaultAsync(u => u.AccountEmail == loginDTO.AccountEmail);

            if (userEntity == null)
                return (1, -1); // User does not exist

            if (!_passwordHasher.VerifyPassword(loginDTO.Password, userEntity.AccountPassword))
            {
                return (2, -1); // Invalid password
            }

            await SignInUser(userEntity);
            return (0, userEntity.AccountRole ?? -1);
        }
        public async Task<(int Status, string Message, short NewAccountID)> RegisterAsyncAutoGenID(RegisterDTO registerDTO)
        {
            if (await _context.SystemAccounts.AnyAsync(u => u.AccountEmail == registerDTO.AccountEmail))
                return (1, "Email already exists", 0);

            if (!IsValidEmail(registerDTO.AccountEmail))
                return (2, "Invalid email format", 0);

            if (string.IsNullOrWhiteSpace(registerDTO.AccountName))
                return (3, "Account Name cannot be empty", 0);

            var hashedPassword = _passwordHasher.HashPassword(registerDTO.Password);
            short newAccountID = await GetAutoGeneratedID();

            var userEntity = new SystemAccount
            {
                AccountId = (short)newAccountID,
                AccountName = registerDTO.AccountName,
                AccountEmail = registerDTO.AccountEmail,
                AccountPassword = hashedPassword,
                AccountRole = registerDTO.AccountRole
            };

            _context.SystemAccounts.Add(userEntity);
            await _context.SaveChangesAsync();

            registerDTO.AccountID = newAccountID; // Update DTO

            await _accountHub.Clients.All.SendAsync("ReceiveAccountUpdate", userEntity);

            return (0, "Success", newAccountID);
        }

        private async Task<short> GetAutoGeneratedID()
        {

            short newAccountID = 1; // Default for first user
            var highestExistingID = await _context.SystemAccounts.OrderByDescending(u => u.AccountId).FirstOrDefaultAsync();
            if (highestExistingID != null)
            {
                newAccountID = (short)(highestExistingID.AccountId + 1);
            }

            return newAccountID;
        }
        /// <summary>
        /// Sign in user and set authentication cookies
        /// </summary>
        private async Task SignInUser(SystemAccount userEntity)
        {
            string roleName = ((UserRoles)userEntity.AccountRole).ToString();

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, userEntity.AccountId.ToString()),
                new Claim(ClaimTypes.Email, userEntity.AccountEmail),
                new Claim(ClaimTypes.Role, roleName)
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties { IsPersistent = true };

            await _httpContextAccessor.HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                authProperties);
        }

        /// <summary>
        /// Logs out the current user
        /// </summary>
        public async Task LogoutAsync()
        {
            await _httpContextAccessor.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }

        /// <summary>
        /// Register a new account
        /// </summary>
        public async Task<(int Status, string Message)> RegisterAsync(RegisterDTO registerDTO)
        {
            if (await _context.SystemAccounts.AnyAsync(u => u.AccountEmail == registerDTO.AccountEmail))
                return (1, "Email already exists");

            if (!IsValidEmail(registerDTO.AccountEmail))
                return (2, "Invalid email format");

            if (string.IsNullOrWhiteSpace(registerDTO.AccountName))
                return (3, "Account Name cannot be empty");

            var hashedPassword = _passwordHasher.HashPassword(registerDTO.Password);

            var userEntity = new SystemAccount
            {
                AccountName = registerDTO.AccountName,
                AccountEmail = registerDTO.AccountEmail,
                AccountPassword = hashedPassword,
                AccountRole = registerDTO.AccountRole
            };

            _context.SystemAccounts.Add(userEntity);
            await _context.SaveChangesAsync();
            await _accountHub.Clients.All.SendAsync("ReceiveAccountUpdate", userEntity);

            return (0, "Success");
        }

        /// <summary>
        /// Updates an existing account
        /// </summary>
        public async Task<short> UpdateAccountAsync(RegisterDTO registerDTO)
        {
            var userEntity = await _context.SystemAccounts.FindAsync(registerDTO.AccountID);
            if (userEntity == null)
                return 1; // Account not found
            userEntity.AccountName = registerDTO.AccountName;
            userEntity.AccountEmail = registerDTO.AccountEmail;
            userEntity.AccountRole = registerDTO.AccountRole;

            if (!string.IsNullOrEmpty(registerDTO.Password))
            {
                userEntity.AccountPassword = _passwordHasher.HashPassword(registerDTO.Password);
            }

            _context.SystemAccounts.Update(userEntity);
            await _context.SaveChangesAsync();
            await _accountHub.Clients.All.SendAsync("ReceiveAccountUpdated", userEntity);

            return 0; // Success
        }
        /// <summary>
        /// Updates an existing account
        /// </summary>
        public async Task<short> UpdateAccountAsync(ProfileUpdateDTO registerDTO)
        {
            var userEntity = await _context.SystemAccounts.FindAsync(registerDTO.AccountID);
            if (userEntity == null)
                return 1; // Account not found
            userEntity.AccountName = registerDTO.AccountName;
            userEntity.AccountEmail = registerDTO.AccountEmail;
            userEntity.AccountPassword = registerDTO.NewPassword;

            _context.SystemAccounts.Update(userEntity);
            await _context.SaveChangesAsync();
            await _accountHub.Clients.All.SendAsync("ReceiveAccountUpdated", userEntity);
            return 0; // Success
        }
        /// <summary>
        /// Retrieves an account by ID
        /// </summary>
        public async Task<RegisterDTO> GetAccountByIdAsync(short id)
        {
            var userEntity = await _context.SystemAccounts.FindAsync(id);
            if (userEntity == null) return null;

            return new RegisterDTO
            {
                AccountID = userEntity.AccountId,
                AccountName = userEntity.AccountName,
                AccountEmail = userEntity.AccountEmail,
                AccountRole = userEntity.AccountRole
            };
        }

        /// <summary>
        /// Gets all user accounts
        /// </summary>
        public async Task<List<SystemAccountDTO>> GetAllAccountsAsync()
        {
            return await _context.SystemAccounts
                .Select(user => new SystemAccountDTO
                {
                    AccountID = user.AccountId,
                    AccountName = user.AccountName,
                    AccountEmail = user.AccountEmail,
                    AccountRole = user.AccountRole
                })
                .ToListAsync();
        }

        /// <summary>
        /// Deletes an account (Admins cannot be deleted, and users cannot delete themselves)
        /// </summary>
        public async Task<bool> DeleteAccountAsync(short accountId)
        {
            var userEntity = await _context.SystemAccounts.FindAsync(accountId);
            if (userEntity == null)
                return false; // Account not found

            var currentUserId = short.Parse(_httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "0");

            // Prevent Admin deletion
            int adminRole = short.Parse(_config["DefaultAdmin:Role"]);
            if (userEntity.AccountRole == adminRole)
                return false;

            // Prevent self-deletion
            if (userEntity.AccountId == currentUserId)
                return false;

            _context.SystemAccounts.Remove(userEntity);
            await _context.SaveChangesAsync();
            await _accountHub.Clients.All.SendAsync("ReceiveAccountDeleted", accountId);

            return true;
        }

        /// <summary>
        /// Hashes all existing plain-text passwords (One-time operation)
        /// </summary>
        public async Task HashExistingPasswords()
        {
            var users = await _context.SystemAccounts.ToListAsync();

            foreach (var user in users)
            {
                if (!user.AccountPassword.StartsWith("$2a$") && !user.AccountPassword.StartsWith("$2b$"))
                {
                    user.AccountPassword = _passwordHasher.HashPassword(user.AccountPassword);
                }
            }

            await _context.SaveChangesAsync();
        }

        /// <summary>
        /// Validates email format
        /// </summary>
        private bool IsValidEmail(string email)
        {
            return email.Contains("@") && email.Contains(".");
        }
    }
}
